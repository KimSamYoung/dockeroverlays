sudo tcpdump -nn -i eth0 "port 4789"

curl http://localhost:8500/v1/kv/docker/network/v1.0/endpoint/?recurse | jq .

curl http://localhost:8500/v1/kv/docker/network/v1.0/endpoint/8c485698f169a4de7b7a133bab6d9eb30472946171a4ad123174e3c2a5b755ac/fa963fe6bbdb63c4bd3599e6fed0833c818d921532691ecfd59f25a83547f569/ | jq ".[0].Value" | tr -d '"' | base64 -d | jq .


## gwbridge and veth
sudo ip link show
sudo ip -d link show veth63f9412
sudo ethtool -S veth63f9412

## Netns
sudo ln -s /var/run/docker/netns /var/run/netns
sudo ip netns list

sudo ip netns exec 8fec149f79d3 ip link show

## overlay links
sudo ip netns exec 2-8c485698f1 ip -d link show
sudo ip netns exec 2-8c485698f1 bridge link show

## overlay ARP table
sudo ip netns exec 2-8c485698f1 ip nei show

## overlay FDB 
sudo ip netns exec 2-8c485698f1 bridge fdb show

sudo rm /var/run/netns

# Manual setup
## on both hosts
sudo mkdir /var/run/netns
docker run -d --net=none --name=test-overlay redis
source vars1/2
./overns.sh


## Without static ARP and FDB
sudo ip netns delete overns
./overns-noarp.sh

### ping?

### New link event
sudo ./watch.py
sudo ip link del dev veth1 type veth peer name veth2


### L2/L3 miss
./overns-noarp.sh
sudo ip netns exec overns ./l2l3miss.py

docker exec -it test-overlay bash
## test ping? any l2 l3 miss?
## change vxlan option and retest

## add arp entry
sudo ip netns exec overns ip neighbor add $container2_ip lladdr $container2_mac_addr dev vxlan1 nud permanent

## look at l2l3miss
## add FDB entry


## clean up and try arpd.py
./overns-noarp.sh
sudo ip netns exec overns ./arpd.py

## clean up and try with consul
curl -X PUT -d '02:42:0a:00:00:02' http://localhost:8500/v1/kv/demo/arp/10.200.0.2
curl -X PUT -d '02:42:0a:00:00:03' http://localhost:8500/v1/kv/demo/arp/10.200.0.3
curl -X PUT -d '10.200.129.76' http://localhost:8500/v1/kv/demo/fib/02:42:0a:00:00:02
curl -X PUT -d '10.200.128.73' http://localhost:8500/v1/kv/demo/fib/02:42:0a:00:00:03

